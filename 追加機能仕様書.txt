
仕様書：未マウントディスク/パーティションプロパティ表示機能
1. 概要
本機能は、既存の未マウントディスク/パーティションリスト表示システムに、ディスクおよびパーティションの詳細なプロパティ情報を表示する機能を追加するものです。これにより、システム管理者はディスクの状態を詳細に把握し、データサルベージの可否判断やPC購入申請の根拠とすることができます。
2. 追加機能
右クリックメニュー:未マウントディスク/パーティションのリスト表示において、各項目を右クリックすると「プロパティ」メニューが表示されます。
プロパティウィンドウ:「プロパティ」メニューを選択すると、ディスクまたはパーティションの詳細なプロパティ情報がウィンドウ表示されます。
3. プロパティ表示内容
3.1. ディスクのプロパティ
基本情報:デバイス名（例：/dev/sda）
モデル名
シリアル番号
容量
S.M.A.R.T.情報:全体的な健康状態（PASSED/FAILED）
主要なS.M.A.R.T.属性（例：Reallocated_Sector_Ct、Current_Pending_Sector、Raw_Read_Error_Rate）
稼働時間（Power_On_Hours）
温度（Temperature_Celsius）
エラーログの要約（最新のエラー、エラー数）
ディスク健康状態判定:「正常」「異常」「故障」のいずれかを判定して表示。
判定基準は、S.M.A.R.T.属性値とエラーログに基づいて、予め設定された閾値を使用。HP100/100～90/100は正常
89～70/100を異常
それ以下を故障として扱う。
S.M.A.R.T.属性値閾値Reallocated_Sector_Ct (代替処理済セクタ数):正常: 0
異常: 1 - 10
故障: 11以上
Current_Pending_Sector (代替処理保留中のセクタ数):正常: 0
異常: 1 - 5
故障: 6以上
Offline_Uncorrectable (オフライン訂正不可能セクタ数):正常: 0
異常: 1
故障: 2以上
UDMA_CRC_Error_Count (UDMA CRCエラー数):正常: 0
異常: 1 - 5
故障: 6以上
その他:SATA PHYイベントカウンターの情報などsmartctl -xで表示される情報
3.2. パーティションのプロパティ
基本情報:デバイス名（例：/dev/sda1）
ファイルシステムの種類
容量
ファイルシステムの状態:fsckコマンドの実行結果（エラーの有無、種類、修復結果）
fsckの結果正常: エラーなし、または軽微なエラーのみ
異常: エラーあり、一部修復不能なエラー
故障: 重大なエラー、修復不能
ディスク健康状態判定:ディスク全体のS.M.A.R.T.情報に基づく判定結果を合わせて表示
「正常」「異常」「故障」のいずれかを判定して表示。
その他:fsckコマンドの詳細な出力内容
4. 判定基準
正常:S.M.A.R.T.全体的な健康状態：PASSED
上記S.M.A.R.T.属性値閾値内
エラーログ：なし、または軽微なエラーのみ
fsckの結果：エラーなし、または修復済み
異常:上記S.M.A.R.T.属性値閾値を一部超える、または増加傾向
エラーログ：軽度から中程度のエラー
fsckの結果：エラーあり、一部修復不能なエラー
故障:上記S.M.A.R.T.属性値閾値を大幅に超える
エラーログ：多数のエラー、または重大なエラー
fsckの結果：重大なエラー、修復不能
5. 注意事項
smartctlとfsckコマンドの実行にはroot権限が必要です。
fsckは、-nオプションを使用して読み取り専用モードで実行し、ファイルシステムの変更は行わないようにします。
各情報を表示するにあたって、異常、故障と判定した項目は目立つように赤文字にするなどして、注意を促す。
6. データ保持と利用
取得したデータは、JSON形式で保存、処理、利用を行います。
JSON形式を採用することで、可読性とプログラムでの解析の容易性を両立します。
必要に応じて、JSONデータをデータベースに格納するなど、柔軟なデータ管理が可能です。

プロパティ情報のテキストファイル出力機能（詳細仕様）
このセクションでは、Linux (Lubuntu) 環境で生成されたプロパティ情報を Windows 環境で利用するためのテキストファイル出力機能について、文字コードの問題に焦点を当てて詳細に記述します。
8.1. 文字コードの選定と理由
Windows 環境で問題なく表示できる文字コードとして、UTF-8 (BOM付き) を採用します。
選定理由:
互換性: UTF-8 は、国際的に広く利用されている文字コードであり、Linux と Windows の両方で高い互換性を持っています。
文字化け対策: Windows の標準的なテキストエディタ（メモ帳など）は、BOM (Byte Order Mark) が付与された UTF-8 ファイルを正しく認識できます。BOM がない場合、文字コードを誤って解釈し、文字化けが発生する可能性があります。
多言語対応: UTF-8 は、日本語だけでなく、さまざまな言語の文字を表現できるため、将来的な多言語対応の拡張性も確保できます。
8.2. 文字コード変換処理
Lubuntu 上で動作するプログラムは、以下の手順でプロパティ情報を UTF-8 (BOM付き) でテキストファイルに出力します。
プロパティ情報の取得: smartctl や fsck などのコマンドからプロパティ情報を取得し、JSON形式で内部的に保持します。
JSONデータのテキスト化: JSON データを文字列に変換します。この際、整形された（インデントされた）読みやすい形式で出力することが望ましいです。
BOMの付与: UTF-8 でエンコードする前に、文字列の先頭に BOM (Byte Order Mark) を付加します。BOM は、UTF-8 では 0xEF 0xBB 0xBF の3バイトのデータです。
UTF-8エンコーディング: 文字列全体を UTF-8 でエンコードします。
ファイル出力: エンコードされたデータをテキストファイルに書き込みます。
8.3. 実装上の注意点 (Pythonの例)
Python での実装例を以下に示します。
Python
import json

def save_properties_to_file(properties, filename):
    """
    プロパティ情報を UTF-8 (BOM付き) でテキストファイルに保存する。

    Args:
        properties: プロパティ情報 (JSON形式の辞書など)
        filename: 出力ファイル名
    """

    try:
        # JSONデータを整形された文字列に変換
        json_string = json.dumps(properties, indent=4, ensure_ascii=False)

        # BOM付きUTF-8でエンコード
        with open(filename, 'w', encoding='utf-8-sig') as f:
            f.write(json_string)

    except Exception as e:
        #エラーをキャッチした場合の処理
        print(f"Error saving properties to file: {e}")
        #エラー発生時の代替処理（例：エラーメッセージをログに記録、別の場所に保存）
        # ログ記録の例
        import logging
        logging.error(f"Error saving properties to file: {e}")

        # 別の場所に保存する例
        backup_filename = filename + ".bak"
        try:
             with open(backup_filename, 'w', encoding='utf-8-sig') as backup_file:
                backup_file.write(json_string)
             print("プロパティのバックアップは{}に保存されました".format(backup_filename))
        except Exception as backup_error:
            print("バックアップに失敗しました: {}".format(backup_error))


json.dumps() の ensure_ascii=False オプションは、非ASCII文字（日本語など）をエスケープせずにそのまま出力するための設定です。
open() 関数の encoding='utf-8-sig' は、BOM付きの UTF-8 でファイルを開くことを指定します。
8.4. 仕様書への記述
上記の選定理由、処理手順、実装上の注意点を仕様書に明確に記述します。特に、以下の点を強調します。
文字コード: UTF-8 (BOM付き)
BOMの付与: BOM (0xEF 0xBB 0xBF) をファイル先頭に付加する。
エンコーディング方法: プログラミング言語ごとの具体的なエンコーディング方法（Pythonの例など）を記述する。
エラー処理: ファイル書き込み時のエラーハンドリングについて言及する。
8.5 テキストファイル名の命名規則
未マウントディスクのプロパティ情報を保存するテキストファイルは、その内容と生成日時を明確にするため、以下の命名規則に従います。
ファイル名の形式:
disk_properties_[デバイス名]_[YYYYMMDD]_[HHMMSS].txt
各要素の説明:
disk_properties: ファイルがディスクのプロパティ情報を含むことを示します。
[デバイス名]: 対象となるディスクのデバイス名（例：sda, sdb）。スラッシュ (/) やその他の特殊文字はアンダースコア (_) に置き換えます。
[YYYYMMDD]: ファイルが生成された日付（年4桁、月2桁、日2桁）。
[HHMMSS]: ファイルが生成された時刻（時2桁、分2桁、秒2桁）。
例:
/dev/sda のプロパティ情報が 2024年5月15日 14時30分00秒 に生成された場合:
disk_properties_sda_20240515_143000.txt
/dev/sdb1 のプロパティ情報が 2024年6月1日 09時00分00秒 に生成された場合:
disk_properties_sdb1_20240601_090000.txt
この命名規則により、以下の利点があります。
一意性: 日時情報を含めることで、ファイル名が重複する可能性を低くします。
識別性: デバイス名を含めることで、どのディスクのプロパティ情報であるかが一目でわかります。
時系列: 日時情報により、ファイルの生成順序が明確になります。
8.6 テキストファイルの出力場所
テキストファイルの出力場所は、プログラムの実行環境や運用ポリシーによって異なります。柔軟性を持たせるため、以下のいずれかの方法、または複数の方法を組み合わせることを検討し、仕様書に明記します。
8.6.1. 設定ファイルで指定
プログラムの設定ファイル（例：.ini, .yaml, .json）に、出力先のディレクトリパスを指定できるようにします。
メリット: 運用環境に合わせて柔軟に出力先を変更できる。
デメリット: 設定ファイルを変更する手間がかかる。
8.6.2. コマンドライン引数で指定
プログラムの起動時に、コマンドライン引数で出力先のディレクトリパスを指定できるようにします。
メリット: 実行ごとに異なる出力先を指定できる。
デメリット: 毎回引数を指定する必要がある。
8.6.3. 固定のディレクトリ
プログラム内で、特定のディレクトリ（例：/var/log/disk_properties/、/tmp/、ユーザーのホームディレクトリ）を出力先として固定します。
メリット: 設定が簡単。
デメリット: 柔軟性に欠ける。
8.6.4. ユーザーが選択可能 (詳細仕様)
GUI環境の利用: この機能は、GUI (Graphical User Interface) 環境を前提とします。Lubuntu はデスクトップ環境を持つため、この要件を満たしています。
ファイルダイアログの表示: プログラムは、ファイル保存ダイアログを表示し、ユーザーに保存場所とファイル名を指定させます。
ダイアログの種類: 「名前を付けて保存」ダイアログを使用します。
初期ディレクトリ:
前回保存場所を記憶している場合は、そのディレクトリを初期表示します。
記憶していない場合は、ユーザーのホームディレクトリ、またはシステムで定められたデフォルトのドキュメントディレクトリを初期表示します。
ファイル名の提案: 8.5 で定義した命名規則に従ったファイル名を、デフォルトのファイル名として提案します。ユーザーは、このファイル名を変更することも可能です。
ファイルの種類フィルタ: 必要に応じて、ファイルの種類フィルタを設定し、「.txt」ファイルのみを表示するようにできます（必須ではありません）。
ユーザー入力の処理:
保存先のパス: ユーザーが選択したディレクトリのパスとファイル名を取得します。
キャンセル処理: ユーザーが「キャンセル」を選択した場合は、保存処理を中断します。
上書き確認: 同じ名前のファイルが既に存在する場合は、上書き確認のダイアログを表示し、ユーザーの指示に従います。
エラー処理:
アクセス権: 選択されたディレクトリへの書き込み権限がない場合は、エラーメッセージを表示し、別の場所を選択するよう促します。
ディスク容量不足: 保存先のディスク容量が不足している場合は、エラーメッセージを表示し、別の場所を選択するよう促します。
その他のエラー: ファイルシステムのエラーなど、その他の予期せぬエラーが発生した場合は、適切なエラーメッセージを表示し、処理を中断します。
実装 (PythonとTkinterの例):
Python
import tkinter as tk
from tkinter import filedialog, messagebox
import json
import os
import datetime  # 日時情報取得のため

def save_properties_to_file_gui(properties, default_device_name):
    """
    プロパティ情報をUTF-8 (BOM付き)でテキストファイルに保存する(GUI版)。

    Args:
        properties: プロパティ情報 (JSON形式の辞書など)
        default_device_name: デフォルトのデバイス名 (例: 'sda')
    """
    root = tk.Tk()
    root.withdraw()  # メインウィンドウを表示しない

    # ファイル名の生成 (8.5の命名規則)
    now = datetime.datetime.now()
    default_filename = f"disk_properties_{default_device_name.replace('/', '_')}_{now.strftime('%Y%m%d_%H%M%S')}.txt"


    #ファイル保存ダイアログ
    file_path = filedialog.asksaveasfilename(
        title="プロパティ情報の保存",
        initialdir=os.path.expanduser("~"),  # ホームディレクトリを初期表示
        initialfile=default_filename,
        filetypes=[("テキストファイル", "*.txt")],
        defaultextension=".txt"
    )
    #キャンセル処理
    if not file_path:
        messagebox.showinfo("キャンセル", "保存がキャンセルされました。")
        return

    #以下、保存処理はtry文内に記述。
    try:
        # JSONデータを整形された文字列に変換
        json_string = json.dumps(properties, indent=4, ensure_ascii=False)

        # BOM付きUTF-8でエンコードして保存
        with open(file_path, 'w', encoding='utf-8-sig') as f:
            f.write(json_string)
        messagebox.showinfo("成功", f"プロパティ情報を {file_path} に保存しました。")

    except Exception as e:
        messagebox.showerror("エラー", f"保存中にエラーが発生しました: {e}")
        #エラーをキャッチした場合の処理は8.3と同様(ログの記録、代替処理)


ライブラリ: Tkinter (Python標準のGUIライブラリ) を使用しています。


asksaveasfilename(): ファイル保存ダイアログを表示する関数です。


エラー処理: try...except ブロックで、ファイル保存時のエラーを処理します。messagebox を使用して、ユーザーにエラーを通知します。


デバイス名の受け渡し: smartctl等で取得されたデバイス名をdefault_device_nameでこの関数に渡します。


仕様書への記述:


上記のファイルダイアログ表示、ユーザー入力処理、エラー処理について詳細に記述します。
使用するGUIライブラリ (Tkinter) と、主要な関数 (asksaveasfilename()) について言及します。
Python のコード例を提示し、実装の具体的なイメージを示します。
ユーザーインターフェースのデザイン (ダイアログのタイトル、ボタンのラベルなど) についても、必要に応じて記述します。

8.6.5. 出力場所の決定と仕様書への記載
最適な出力方法は、プログラムの使用状況や運用環境によって異なります。以下の点を考慮して、仕様書に出力場所と、その設定方法（設定ファイル、コマンドライン引数、固定ディレクトリなど）を明確に記述してください。
運用環境: プログラムがどのような環境で実行されるか（サーバー、デスクトップPCなど）。
ユーザー: 誰がプログラムを実行し、出力ファイルを管理するか（システム管理者、一般ユーザーなど）。
セキュリティ: 出力ファイルに機密情報が含まれる可能性があるか。
保守性: 出力先の変更が容易である必要があるか。
8.6.6. 出力場所に関する推奨事項
一般的には、以下のいずれかの方法を推奨します。
システム管理者向けのツール:
/var/log/disk_properties/ などのシステムログディレクトリ配下に、専用のディレクトリを作成して出力する。
設定ファイルで出力先を変更できるようにする。
一般ユーザー向けのツール:
ユーザーのホームディレクトリ配下に、専用のディレクトリ（例：.disk_properties/）を作成して出力する。
設定ファイルまたはGUIで出力先を変更できるようにする。
出力場所が存在しない場合は、プログラムが自動的にディレクトリを作成するようにします。
出力場所に十分な空き容量がない場合など、書き込みに失敗した場合は、エラーメッセージを表示し、代替の場所に保存を試みる、ユーザーに通知するなど、適切なエラーハンドリングを行います。

